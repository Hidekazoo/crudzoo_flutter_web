// Mocks generated by Mockito 5.3.2 from annotations
// in crudzoo_flutter_web/test/usecase/tasks_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:crudzoo_flutter_web/domain/task.dart' as _i2;
import 'package:crudzoo_flutter_web/usecase/tasks_input_port.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Task].
///
/// See the documentation for Mockito's code generation for more information.
class MockTask extends _i1.Mock implements _i2.Task {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get subject => (super.noSuchMethod(
        Invocation.getter(#subject),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get link => (super.noSuchMethod(
        Invocation.getter(#link),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get body => (super.noSuchMethod(
        Invocation.getter(#body),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);
}

/// A class which mocks [TasksInputPort].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksInputPort extends _i1.Mock implements _i3.TasksInputPort {
  @override
  _i4.Future<List<_i2.Task>> findTasks() => (super.noSuchMethod(
        Invocation.method(
          #findTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Task>>.value(<_i2.Task>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Task>>.value(<_i2.Task>[]),
      ) as _i4.Future<List<_i2.Task>>);
}
